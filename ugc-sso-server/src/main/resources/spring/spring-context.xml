<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd"
       default-autowire="byName" default-lazy-init="false">

    <!-- 采用注释的方式配置bean -->
    <context:annotation-config />

    <!-- 读入配置属性文件 -->
    <context:property-placeholder location="classpath:nosql.properties,classpath:jdbc.properties,classpath:service.properties,classpath:dubbo.properties"/>

    <!-- proxy-target-class默认"false",更改为"ture"使用CGLib动态代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />


    <!-- 业务数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init">
        <!-- 基本属性 url、user、password -->
        <property name="url">
            <value>jdbc:mysql://${mysql.dbServer}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useReadAheadInput=false&amp;useUnbufferedInput=false&amp;connectTimeout=6000&amp;socketTimeout=120000&amp;useOldAliasMetadataBehavior=true&amp;</value>
        </property>
        <property name="username" value="${mysql.user}"/>
        <property name="password" value="${mysql.passwd}"/>
        <property name="defaultAutoCommit" value="true"/>
        <property name="defaultTransactionIsolation" value="2"/>
        <property name="initialSize" value="20"/>
        <property name="maxActive" value="250"/><!-- 相当于maxPoolSize -->
        <property name="minIdle" value="15"/><!-- 相当于minPoolSize -->

        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="300000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 set:15分钟的生存期-->
        <property name="minEvictableIdleTimeMillis" value="900000"/>
        <property name="validationQuery" value="select 1 from dual"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- redis连接池 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxTotal" value="${redis.pool.maxTotal}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="false"/>
    </bean>

    <!-- redis连接工厂 -->
    <bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:use-pool="true"  p:hostName="${redis.host}" p:port="${redis.port}">
        <constructor-arg index="0" ref="jedisPoolConfig" type="redis.clients.jedis.JedisPoolConfig"/>
    </bean>

    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
    <bean id="fastJsonRedisSerializer" class="com.ugc.sso.server.redis.serializer.FastJsonRedisSerializer" />

    <!-- redis模版 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnFactory"/>
        <!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <!--对key的默认序列化器。默认值是StringSerializer-->
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。-->
        <property name="valueSerializer" ref="fastJsonRedisSerializer"/>
        <!--存储Map时key需要的序列化配置-->
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <!--存储Map时value需要的序列化配置-->
        <property name="hashValueSerializer" ref="fastJsonRedisSerializer"/>
        <!--开启事务
        系统自动帮我们拿到了事务中绑定的连接。可以在一个方法的多次对Redis增删该查中，始终使用同一个连接。
        -->
        <property name="enableTransactionSupport" value="false"/>
        <!--在Spring中@Transactional 也是可以进行事物控制的。-->
    </bean>

    <!--<bean id="redisLockUtils" class="com.ugc.util.RedisUtils">-->
        <!--<property name="redisTemplate" ref="redisTemplate" />-->
    <!--</bean>-->

    <import resource="classpath:spring/spring-dubbo.xml" />
    <import resource="classpath:spring/spring-dubbo-sso-server.xml" />
    <import resource="classpath:spring/application-sso-server.xml" />

</beans>